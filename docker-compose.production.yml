version: '3.8'

services:
  # Redis 服务
  redis:
    image: redis:7-alpine
    container_name: aeroscout-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - aeroscout-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务
  backend:
    build:
      context: ./aeroscouthq_backend
      dockerfile: Dockerfile
    container_name: aeroscout-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite+aiosqlite:////app/data/aeroscout.db
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_here_please_change_me_in_production}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - POI_DAILY_LIMIT=10
      - FLIGHT_DAILY_LIMIT=5
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/2
      - REDIS_SESSION_TTL=3600
      - LOG_LEVEL=WARNING
      - ENABLE_SEARCH_DEBUG_LOGS=false
    volumes:
      - ./data:/app/data
      - backend_cache:/app/cache
      - backend_cookies:/app/trip_cookies.json
      - backend_tokens:/app/kiwi_token.json
    depends_on:
      - redis
    networks:
      - aeroscout-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker 服务
  celery:
    build:
      context: ./aeroscouthq_backend
      dockerfile: Dockerfile
    container_name: aeroscout-celery
    restart: unless-stopped
    command: celery -A app.celery_worker worker --loglevel=info
    environment:
      - DATABASE_URL=sqlite+aiosqlite:////app/data/aeroscout.db
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_here_please_change_me_in_production}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/2
      - LOG_LEVEL=WARNING
    volumes:
      - ./data:/app/data
      - backend_cache:/app/cache
      - backend_cookies:/app/trip_cookies.json
      - backend_tokens:/app/kiwi_token.json
    depends_on:
      - redis
      - backend
    networks:
      - aeroscout-network

  # 前端服务
  frontend:
    build:
      context: ./aeroscout-frontend
      dockerfile: Dockerfile
    container_name: aeroscout-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://AeroScout.izlx.de/api
      - HOSTNAME=0.0.0.0
    depends_on:
      - backend
    networks:
      - aeroscout-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: aeroscout-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - aeroscout-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: aeroscout-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email 1242772513@izlx.de --agree-tos --no-eff-email -d AeroScout.izlx.de -d www.AeroScout.izlx.de

volumes:
  redis_data:
  backend_data:
  backend_cache:
  backend_cookies:
  backend_tokens:

networks:
  aeroscout-network:
    driver: bridge
